#!/usr/bin/env node

'use strict'

const fs = require('fs')
const path = require('path')
const semver = require('semver')
const ethUtil = require('ethereumjs-util')
const swarmhash = require('swarmhash')

// This script updates the index files list.js and list.txt in the directories containing binaries,
// as well as the 'latest' and 'nightly' symlinks.

function updateSymlink (linkPathRelativeToRoot, targetRelativeToLink) {
  const absoluteLinkPath = path.join(__dirname, linkPathRelativeToRoot)

  fs.readlink(absoluteLinkPath, (err, linkString) => {
    if (err && err.code !== 'ENOENT') {
      throw err
    }

    if (!err && targetRelativeToLink !== linkString) {
      fs.unlinkSync(absoluteLinkPath)
      console.log('Removed link ' + linkPathRelativeToRoot + ' -> ' + linkString)
    }

    if (err || targetRelativeToLink !== linkString) {
      fs.symlinkSync(targetRelativeToLink, absoluteLinkPath, 'file')
      console.log('Created link ' + linkPathRelativeToRoot + ' -> ' + targetRelativeToLink)
    }
  })
}

function processDir (dir, listCallback) {
  fs.readdir(path.join(__dirname, dir), { withFileTypes: true }, function (err, files) {
    if (err) {
      throw err
    }

    function buildVersion (build) {
      var version = build.version
      if (build.prerelease && build.prerelease.length > 0) {
        version += '-' + build.prerelease
      }
      if (build.build && build.build.length > 0) {
        version += '+' + build.build
      }
      return version
    }

    function readFile (file) {
      return fs.readFileSync(path.join(__dirname, dir, file))
    }

    const binaryPrefix = (dir === '/bin' || dir === '/wasm' ? 'soljson' : 'solc-' + dir.slice(1))

    // ascending list (oldest version first)
    const parsedList = files
      .filter(function (file) {
        // Skip symbolic links with less then 8 characters in the commit hash.
        // They exist only for backwards-compatibilty and should not be on the list.
        return dir !== '/bin' ||
          !file.isSymbolicLink() ||
          file.name.match(/^.+\+commit\.[0-9a-f]{8,}\.js$/)
      })
      .map(function (file) { return file.name })
      .map(function (file) {
        return file.match(new RegExp('^' + binaryPrefix + '-v([0-9.]*)(-([^+]*))?(\\+(.*))?\\.js$'))
      })
      .filter(function (version) { return version })
      .map(function (pars) { return { path: pars[0], version: pars[1], prerelease: pars[3], build: pars[5] } })
      .map(function (pars) {
        const fileContent = readFile(pars.path)
        pars.longVersion = buildVersion(pars)
        pars.keccak256 = '0x' + ethUtil.keccak(fileContent).toString('hex')
        pars.urls = ['bzzr://' + swarmhash(fileContent).toString('hex')]
        return pars
      })
      .sort(function (a, b) {
        if (a.longVersion === b.longVersion) {
          return 0
        }

        // NOTE: a vs. b (the order is important), because we want oldest first on parsedList.
        // NOTE: If semver considers two versions equal we don't have enough info to say which came earlier
        // so we don't care about their relative order as long as it's deterministic.
        return semver.compare(a.longVersion, b.longVersion) || (a.longVersion > b.longVersion ? -1 : 1)
      })

    // When the list is ready, let the callback process it
    if (listCallback !== undefined) {
      listCallback(parsedList)
    }

    // descending list
    const releases = parsedList
      .slice().reverse()
      .reduce(function (prev, next) {
        if (next.prerelease === undefined) {
          prev[next.version] = next.path
        }
        return prev
      }, {})

    // descending list
    const buildNames = parsedList
      .slice().reverse()
      .map(function (ver) { return ver.path })

    const latestRelease = parsedList
      .slice().reverse()
      .filter(function (version) {
        if (version.prerelease === undefined) {
          return version
        }
      })
      .map(function (version) {
        return version.version
      })[0]

    // latest build (nightly)
    const latestBuildFile = buildNames[0]

    // latest release
    const latestReleaseFile = releases[latestRelease]

    // Write list.txt
    // A descending list of file names.
    fs.writeFile(path.join(__dirname, dir, '/list.txt'), buildNames.join('\n'), function (err) {
      if (err) {
        throw err
      }
      console.log('Updated ' + dir + '/list.txt')
    })

    // Write bin/list.json
    // Ascending list of builds and descending map of releases.
    fs.writeFile(path.join(__dirname, dir, '/list.json'), JSON.stringify({ builds: parsedList, releases: releases, latestRelease: latestRelease }, null, 2), function (err) {
      if (err) {
        throw err
      }
      console.log('Updated ' + dir + '/list.json')
    })

    // Write bin/list.js
    // Descending list of build filenames and descending map of releases.
    fs.writeFile(path.join(__dirname, dir, '/list.js'), generateLegacyListJS(buildNames, releases), function (err) {
      if (err) {
        throw err
      }
      console.log('Updated ' + dir + '/list.js')
    })

    // Update 'latest' symlink (except for wasm/ where the link is hard-coded to point at the one in bin/)
    if (dir !== '/wasm') {
      updateSymlink(path.join(dir, binaryPrefix + '-latest.js'), latestReleaseFile)
    }

    // Update 'nightly' symlink in bin/ (we don't have nightlies for other platforms)
    if (dir === '/bin') {
      updateSymlink(path.join(dir, binaryPrefix + '-nightly.js'), latestBuildFile)
    }
  })
}

const DIRS = [
  '/bin',
  '/wasm',
  '/emscripten-asmjs'
]

DIRS.forEach(function (dir) {
  if (dir !== '/wasm') {
    processDir(dir)
  } else {
    processDir(dir, function (parsedList) {
      // Any new releases added to wasm/ need to be linked in emscripten-wasm32/ first.
      // Only then can we start processing emscripten-wasm32/.
      // We don't need to do this for emscripten-asmjs/ because we don't build asm.js releases any more.
      parsedList.forEach(function (release) {
        if (release.prerelease === undefined) {
          updateSymlink(
            path.join('/emscripten-wasm32', 'solc-emscripten-wasm32-v' + release.longVersion + '.js'),
            path.join('..', 'wasm', release.path)
          )
        }
      })

      processDir('/emscripten-wasm32')
    })
  }
})

function generateLegacyListJS (builds, releases) {
  return `
var soljsonSources = ${JSON.stringify(builds, null, 2)};
var soljsonReleases = ${JSON.stringify(releases, null, 2)};

if (typeof(module) !== 'undefined')
  module.exports = {
    'allVersions': soljsonSources,
    'releases': soljsonReleases
  };
`
}
